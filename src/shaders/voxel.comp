#version 440 core

// For fixing floating point errors
#define EPSILON 0.0001

layout(local_size_x = 10, local_size_y = 10) in;
layout(rgba32f, binding = 0) uniform image2D outputImage;

uniform uvec3 mapSize;

// Sky color example from Ray Tracing In One Weekend
vec3 skyColor(vec3 rayPos, vec3 rayDir) {
    float t = 0.5 * (rayDir.y + 1);
    return (1 - t) * vec3(1) + t * vec3(0.5, 0.7, 1.0);
}

bool intersectBox(vec3 rayPos, vec3 invRayDir, vec3 boxMin, vec3 boxMax) {
    vec3 tMin = (boxMin - rayPos) * invRayDir;
    vec3 tMax = (boxMax - rayPos) * invRayDir;

    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);

    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar  = min(min(t2.x, t2.y), t2.z);

    return tFar >= tNear;
}

void main() {
    ivec2 outputCoords = ivec2(gl_GlobalInvocationID.xy);

    vec3 outputColor = vec3(0, 1, 0);

    imageStore(outputImage, outputCoords, vec4(outputColor, 1));
    //vec3 rayPos = vec3(0, 0, 0);
    //vec3 rayDir = vec3(0, 0, 1);
    //vec3 invRayDir = 1.0 / rayDir;

    //if (intersectBox(rayPos, invRayDir, vec3(0, 0, 0), mapSize)) {
    //    // render map
    //    outputColor.rgb = vec3(1, 0, 0);
    //} else {
    //    outputColor.rgb = skyColor(rayPos, rayDir);
    //}

    //imageStore(outputImage, outputCoords, outputColor);
}