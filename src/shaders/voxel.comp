#version 440 core

// For fixing floating point errors
#define EPSILON 0.0001

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D outputImage;

uniform uvec3 mapSize;

uniform mat4 invView;
uniform mat4 invCenteredView;
uniform mat4 invProjection;

// Sky color example from Ray Tracing In One Weekend
vec3 skyColor(vec3 rayPos, vec3 rayDir) {
    float t = 0.5 * (rayDir.y + 1);
    return (1 - t) * vec3(1) + t * vec3(0.5, 0.7, 1.0);
}

bool intersectBox(vec3 rayPos, vec3 invRayDir, vec3 boxMin, vec3 boxMax) {
    vec3 tMin = (boxMin - rayPos) * invRayDir;
    vec3 tMax = (boxMax - rayPos) * invRayDir;

    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);

    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar  = min(min(t2.x, t2.y), t2.z);

    return tFar >= tNear;
}

//vec3 branchLessIntersectVoxel(vec3 rayPos, vec3 rayDir, vec3 invRayDir) {
//    ivec3 voxelPos = ivec3(floor(rayPos));
//    ivec3 rayStep = ivec3(sign(rayDir));
//    vec3 deltaDist = abs(invRayDir);
//    vec3 sideDist = (sign(rayDir) * (voxelPos - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist;
//
//    const int maxSteps = 100;
//    for (int i = 0; i < maxSteps; ++i) {
//        if (voxelPos == vec3(0, 0, 0)) {
//            return vec3(1, 0, 0);
//        }
//
//        bvec3 mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));
//        sideDist += vec3(mask) * deltaDist;
//        voxelPos += ivec3(mask) * rayStep;
//    }
//
//    return vec3(0, 0, 0);
//}


// random stuff taken from https://www.shadertoy.com/view/tsBBWW
const float pi = 3.14159265359f;
const float twoPi = 2 * pi;

uint wangHash(inout uint seed) {
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}

float randomFloat(inout uint state) {
    return float(wangHash(state)) / 4294967296.0;
}

vec3 randomUnitVector(inout uint state) {
    float z = randomFloat(state) * 2.0f - 1.0f;
    float a = randomFloat(state) * twoPi;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

struct VoxelHit {
    float dist;
    vec3 position;
    vec3 color;
    vec3 normal;
    bool hit;
};

bool inVoxelBuffer(ivec3 vx) {
    return (vx.x >= 0 && vx.x < 8) &&
    (vx.y >= 0 && vx.y < 8) &&
    (vx.z >= 0 && vx.z < 8);
}

VoxelHit traceVoxel(vec3 rayPos, vec3 rayDir) {
    vec3 pos = floor(rayPos);
    vec3 step = sign(rayDir);
    vec3 tDelta = step / rayDir;

    float tMaxX, tMaxY, tMaxZ;
    vec3 fr = fract(rayPos);

    tMaxX = tDelta.x * ((rayDir.x > 0) ? (1.0 - fr.x) : fr.x);
    tMaxY = tDelta.y * ((rayDir.y > 0) ? (1.0 - fr.y) : fr.y);
    tMaxZ = tDelta.z * ((rayDir.z > 0) ? (1.0 - fr.z) : fr.z);

    vec3 norm;
    const int maxTrace = 100;

    VoxelHit hit;
    hit.hit = false;

    vec3 lastPos = rayPos;

    for (int i = 0; i < maxTrace; ++i) {
        if (inVoxelBuffer(ivec3(pos))) {
            hit.position = pos;
            hit.normal = norm;
            hit.dist = length(lastPos - rayPos);

            if (pos.y == 0) {
                hit.hit = true;
                hit.color = vec3(1, 0, 0);
                break;
            } else if (pos.y == 1 && int(pos.x) % 3 == 0 && int(pos.z) % 2 == 0) {
                hit.hit = true;
                hit.color = vec3(0, 1, 0);
                break;
            }
        }

        if (tMaxX < tMaxY) {
            if (tMaxZ < tMaxX) {
                tMaxZ += tDelta.z;
                pos.z += step.z;
                norm = vec3(0, 0,-step.z);
            } else {
                tMaxX += tDelta.x;
                pos.x += step.x;
                norm = vec3(-step.x, 0, 0);
            }
        } else {
            if (tMaxZ < tMaxY) {
                tMaxZ += tDelta.z;
                pos.z += step.z;
                norm = vec3(0, 0, -step.z);
            } else {
                tMaxY += tDelta.y;
                pos.y += step.y;
                norm = vec3(0, -step.y, 0);
            }
        }
    }

    return hit;
}

vec3 traceRay(vec3 rayPos, vec3 rayDir, inout uint rngState) {
    vec3 invRayDir = 1.0 / rayDir;

    if (intersectBox(rayPos, invRayDir, vec3(0, 0, 0), mapSize)) {
        vec3 color = vec3(0);

        VoxelHit hit = traceVoxel(rayPos, rayDir);
        if (hit.hit) {
            return hit.color;
        }
    }

    return skyColor(rayPos, rayDir);

    //vec3 color = vec3(0);

    //for (int depth = 0; depth < 1; ++depth) {
    //    vec3 invRayDir = 1.0 / rayDir;

    //    if (intersectBox(rayPos, invRayDir, vec3(0, 0, 0), mapSize)) {
    //        VoxelHit hit = traceVoxel(rayPos, rayDir);
    //        if (hit.hit) {
    //            rayPos = hit.position;
    //            rayDir = hit.normal;
    //            color = color + 0.5 * hit.color;
    //        } else {
    //            color = color + skyColor(rayPos, rayDir);
    //            break;
    //        }
    //    } else {
    //        if (depth == 0) {
    //            color = skyColor(rayPos, rayDir);
    //        }
    //        break;
    //    }
    //}

    //return color;
}

void main() {
    ivec2 outputCoords = ivec2(gl_GlobalInvocationID.xy);
    vec2 screenCoords = vec2(outputCoords) / vec2(imageSize(outputImage)) * 2 - 1;
    uint rngState = uint(outputCoords.x) * 1973 + uint(outputCoords.y) * 9277 | 1;

    vec3 rayPos = (invView * vec4(0, 0, 0, 1)).xyz;
    vec3 rayDir = normalize((invCenteredView * invProjection * vec4(screenCoords, 0, 1)).xyz) + EPSILON;

    vec3 outputColor = traceRay(rayPos, rayDir, rngState);
    imageStore(outputImage, outputCoords, vec4(outputColor, 1));
}