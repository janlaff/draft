#version 440 core
#extension GL_NV_gpu_shader5 : enable

// For fixing floating point errors
#define EPSILON 0.0001
#define INV_GAMMA 0.4545

layout(local_size_x = 10, local_size_y = 10) in;
layout(rgba32f, binding = 0) uniform image2D outputImage;

layout(binding = 0) buffer voxelIndices {
    uint8_t indices[];
};

layout(binding = 1) buffer voxelPalette {
    uint32_t palette[];
};

uniform uvec3 mapSize;
uniform uint frameCount;
uniform uint numSamples;
uniform int numRayBounces;
uniform int maxDDADepth;

uniform mat4 invView;
uniform mat4 invCenteredView;
uniform mat4 invProjection;

#include "sky.glsl"
#include "box.glsl"
#include "random.glsl"

struct Material {
    bool metal;
    vec3 albedo;
    vec3 emissive;
};

struct VoxelHit {
    bool hit;
    vec3 position;
    vec3 normal;
    Material material;
};

bool inVoxelBuffer(ivec3 vx) {
    return (vx.x >= 0 && vx.x < mapSize.x) &&
    (vx.y >= 0 && vx.y < mapSize.y) &&
    (vx.z >= 0 && vx.z < mapSize.z);
}

vec4 decodeColor(uint32_t paletteColor) {
    return vec4(
        (paletteColor >> 24) & 0xff,
        (paletteColor >> 16) & 0xff,
        (paletteColor >> 8) & 0xff,
        (paletteColor >> 0) & 0xff
    ) / 255;
}

void getVoxel(vec3 pos, inout VoxelHit hit) {
    uvec3 voxelPos = uvec3(pos);
    // FIXME: assuming mapSize is same all axis
    uint size = 32;
    uint voxelIdx = voxelPos.z*mapSize.y*mapSize.x + voxelPos.y*mapSize.x + voxelPos.x;
    uint8_t voxelColorIndex = indices[voxelIdx];

    if (voxelColorIndex != 0u) {
        hit.hit = true;
        hit.material.albedo = decodeColor(palette[voxelColorIndex]).xyz;
        hit.material.emissive = vec3(0);
        hit.material.metal = false;
    }
}

VoxelHit traceVoxel(vec3 rayPos, vec3 rayDir) {
    vec3 pos = floor(rayPos);
    vec3 step = sign(rayDir);
    vec3 tDelta = step / rayDir;

    float tMaxX, tMaxY, tMaxZ;
    vec3 fr = fract(rayPos);

    tMaxX = tDelta.x * ((rayDir.x > 0) ? (1.0 - fr.x) : fr.x);
    tMaxY = tDelta.y * ((rayDir.y > 0) ? (1.0 - fr.y) : fr.y);
    tMaxZ = tDelta.z * ((rayDir.z > 0) ? (1.0 - fr.z) : fr.z);

    vec3 norm;
    vec3 hitPos;
    float dist;

    VoxelHit hit;
    hit.hit = false;

    for (int i = 0; i < maxDDADepth; ++i) {
        if (inVoxelBuffer(ivec3(pos))) {
            getVoxel(pos, hit);
            if (hit.hit) {
                hit.position = rayPos + (dist - EPSILON) * rayDir;
                hit.normal = norm;
                break;
            }
        }

        if (tMaxX < tMaxY) {
            if (tMaxZ < tMaxX) {
                dist = tMaxZ;
                tMaxZ += tDelta.z;
                pos.z += step.z;
                norm = vec3(0, 0,-step.z);
            } else {
                dist = tMaxX;
                tMaxX += tDelta.x;
                pos.x += step.x;
                norm = vec3(-step.x, 0, 0);
            }
        } else {
            if (tMaxZ < tMaxY) {
                dist = tMaxZ;
                tMaxZ += tDelta.z;
                pos.z += step.z;
                norm = vec3(0, 0, -step.z);
            } else {
                dist = tMaxY;
                tMaxY += tDelta.y;
                pos.y += step.y;
                norm = vec3(0, -step.y, 0);
            }
        }
    }

    return hit;
}

vec4 traceRay(vec3 rayPos, vec3 rayDir, inout uint rngState) {
    vec3 invRayDir = 1.0 / rayDir;
    vec2 intersection = intersectBox(rayPos, invRayDir, vec3(0, 0, 0), mapSize);
    vec3 origRayPos = rayPos;

    // Ray hits the voxel box
    if (intersection.x <= intersection.y) {
        // Advance ray start to box
        if (intersection.x > 0) {
            rayPos += rayDir * (intersection.x - EPSILON);
        }

        VoxelHit hit;
        vec3 color = vec3(0);
        vec3 throughPut = vec3(1);
        float depth = 0;

        for (int n = 0; n < numRayBounces; ++n) {
            hit = traceVoxel(rayPos, rayDir);
            if (hit.hit) {
                if (n == 0) {
                    depth = length(hit.position - origRayPos);
                }

                // Lighting needs to be implemented here
                color += hit.material.emissive * throughPut;
                throughPut *= hit.material.albedo;

                if (hit.material.metal) {
                    vec3 reflected = reflect(normalize(rayDir), hit.normal);
                    if (dot(reflected, hit.normal) > 0) {
                        rayPos = hit.position;
                        rayDir = reflected;
                    } else {
                        return vec4(0, 0, 0, 1);
                    }
                } else {
                    rayPos = hit.position;
                    rayDir = hit.normal + randomUnitVector(rngState);
                }
            } else {
                color += skyColor(rayDir) * throughPut;
                break;
            }
        }

        return vec4(color, depth);
    } else {
        return vec4(skyColor(rayDir), 0);
    }
}


void main() {
    ivec2 outputCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screenSize = imageSize(outputImage);

    uint rngState = randomSeed(outputCoords, frameCount);
    vec2 rayNoise = vec2(randomFloat(rngState), randomFloat(rngState));
    vec2 screenCoords = (vec2(outputCoords) + rayNoise) / screenSize * 2 - 1;

    vec3 rayPos = (invView * vec4(0, 0, 0, 1)).xyz;
    vec3 rayDir = normalize((invCenteredView * invProjection * vec4(screenCoords, 0, 1)).xyz) + EPSILON;
    //vec3 rayPos = (invView * invProjection * vec4(screenCoords * 2, 0, 1)).xyz;
    //vec3 rayDir = normalize((invCenteredView * invProjection * vec4(0, 0, 0, 1)).xyz) + EPSILON;

    vec4 outputColor = traceRay(rayPos, rayDir, rngState);
    outputColor.xyz = pow(outputColor.xyz, vec3(INV_GAMMA));

    vec4 prevSample = imageLoad(outputImage, outputCoords);
    outputColor = mix(prevSample, outputColor, (1 / float(numSamples)));
    imageStore(outputImage, outputCoords, outputColor);
}